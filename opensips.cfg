#
#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

debug=3
#log_stderror=no
log_stderror=yes
log_facility=LOG_LOCAL0

fork=yes
children=2

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


#listen=udp:127.0.0.1:5060   # CUSTOMIZE ME
listen=udp:192.168.3.200:5080
listen=udp:192.168.3.200:5060
#listen=udp:192.168.52.10:5060

disable_tcp=yes

disable_tls=yes


####### Modules Section ########

#set module path
#mpath="/usr/local/lib64/opensips/modules/"
mpath="/usr/lib64/opensips/modules/"
#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
#odparam("tm", "fr_inv_timeout", 30)
modparam("tm", "fr_inv_timer", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "wt_timer", 2)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)


#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "failed_transaction_flag", "ACC_FAILED")
/* account triggers (flags) */
modparam("acc", "log_flag", "ACC_DO")
modparam("acc", "log_missed_flag", "ACC_MISSED")


### rest_client module

loadmodule "rest_client.so"
modparam("rest_client", "connection_timeout", 300)
modparam("rest_client", "curl_timeout", 300)
modparam("rest_client", "ssl_verifypeer", 0)
modparam("rest_client", "ssl_verifyhost", 0)


#loadmodule "uac.so"
#modparam("uac","restore_mode","auto")
#modparam("uac","rr_from_store_param","my_Fparam")
#modparam("uac","rr_to_store_param","my_Tparam")
#modparam("rr","append_fromtag",1)



### Dialog Module

loadmodule "dialog.so"
#modparam("dialog", "profiles_with__value", "inbound_call")
#modparam("dialog", "dlg_flag", 4)
#modparam("dialog", "rr_param", "xyz")
modparam("dialog","profiles_with_value","cal")
modparam("dialog", "profiles_no_value", "cali")
modparam("dialog", "rr_param", "did")
modparam("dialog", "dlg_match_mode", 1)
#modparam("dialog","profiles_with_value","inboundcal")

### CACHEDB_REDIS MODULE
loadmodule "cachedb_redis.so" 
#modparam("cachedb_redis","cachedb_url","redis://localhost:6379/")
modparam("cachedb_redis", "cachedb_url","redis:1://192.168.3.200:6379/")
#modparam("cachedb_redis", "cachedb_url","redis:cluster1://random_url:8888/");


### Dialog Module
loadmodule "db_postgres.so"
#modparam("usrloc", "db_url",  "postgres://duo:DuoS123@192.168.0.70/opensips")
#modparam("usrloc", "db_url",  "postgresql://postgres:aps@192.168.0.17/dvpdb")
#modparam("usrloc", "db_url",  "pgsql://postgres:aps@192.168.0.17/opensips")
#modparam("db_postgresql", "ping_interval", 600)
#modparam("db_postgresql", "timeout_interval", 2)
#modparam("auto_reconnect", "auto_reconnect", 0)


###Load Balancer Module

loadmodule "load_balancer.so"
#modparam("load_balancer", "db_url", "dbdriver://username:password@dbhost/dbname")
modparam("load_balancer", "db_url",  "postgres://duo:DuoS123@192.168.3.200/opensips")
#modparam("load_balancer", "db_url",  "pgsql://postgres:aps@192.168.0.17/opensips")
modparam("load_balancer", "db_table", "load_balancer")
modparam("load_balancer", "probing_interval", 60)
modparam("load_balancer", "probing_method", "INFO")

###MI_XMLRPC module

loadmodule "mi_xmlrpc.so"
modparam("mi_xmlrpc", "port", 8000)
modparam("mi_xmlrpc", "log_file", "/var/log/abyss.log")
modparam("mi_xmlrpc", "reply_option", 0)
modparam("mi_xmlrpc", "buffer_size", 8192)




####### Routing Logic ########

# main request routing logic

route{


if(is_method("OPTIONS"))
	{
	sl_send_reply("200" , "ok");
	exit;
	}

xlog ("START ROUTE SECTION \n");

#$rd="192.168.1.209";
#route(relay);
#exit;
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {
		# sequential requests within a dialog should
		# take the path determined by record-routing
xlog ("HAS TO TAGGGG \n");
		if (loose_route()) {
xlog ("HAS TO TAG LOOSE ROUTE \n");
			
			if (is_method("BYE")) {

cache_fetch("redis:1","$ci",$avp(uuid));


xlog ("\033[32m --REDIS---$avp(uuid)----- \n");
cache_remove("redis:1","$ci");
cache_fetch("redis:1","$ci",$avp(11));
xlog ("\033[32m --REDIS---$avp(11)----------------------------------- \33[0m \n");


				setflag(ACC_DO); # do accounting ...
				setflag(ACC_FAILED); # ... even if the transaction fails
xlog ("HAS TO TAG  LOOSE ROUTE IS METHOD BYEEEEEE -DISCONNECT USER NORMAL---- $avp(uuid) ----- CLEARING--$fU --$tU\n");

rest_get("http://192.168.0.48:8085/dvp/6.0/limit_handler/limitapi/limit_decrement/?key=$avp(uuid)","$var(result)","$var(aa)","$var(bb)");

			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
xlog ("HAS TO TAG  LOOSE ROUTE IS METHOD INVITE \n");
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(relay);
		} else {
xlog ("HAS TO TAG  LOOSE ROUTE ELSE \n");	
			if ( is_method("ACK") ) {

xlog ("HAS TO TAG  LOOSE ROUTE ELSE IS METHOD ACKKKK \n");
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
xlog ("HAS TO TAG  LOOSE ROUTE ELSE T_CHECK_TRANS IF \n");
	
					t_relay();

cache_fetch("redis:1","$ci",$avp(uuid));


xlog ("\033[32m --REDIS---$avp(uuid)----- \n");
cache_remove("redis:1","$ci");
cache_fetch("redis:1","$ci",$avp(11));
xlog ("\033[32m --REDIS---$avp(11)----------------------------------\33[0m \n");

xlog ("HAS TO TAG  LOOSE ROUTE ELSE T_CHECK_TRANS T_RELAY  -----  $avp(uuid)  ----\n");
rest_get("http://192.168.0.48:8085/dvp/6.0/limit_handler/limitapi/limit_decrement/?key=$avp(uuid)","$var(result)","$var(aa)","$var(bb)");
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
xlog ("HAS TO TAG  LOOSE ROUTE ELSE T_CHECK_TRANS ELSE \n");
					exit;
				}
			}
xlog (" HAS TO TAG  END OF LOOSE ROUTE ELSE \n");
			sl_send_reply("404","Not here");
		}
xlog ("END OF HAS TO TAGGG \n");
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL"))
	{
xlog ("IS METHOD CANCEL \n");
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {

xlog ("IS METHOD NOT REGISTER \n");
		if (from_uri==myself)
		{
		} else {
			# if caller is not local, then called number must be local
			if (!uri==myself) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}
	}

	# preloaded route checking
	if (loose_route()) {

xlog ("IF LOOSE ROUTE \n");

		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
xlog ("IS METHOD REGISTER MESSAGE  \n");

		record_route();
xlog ("RECORD ROUTE CALL \n");


	# account only INVITEs
	if (is_method("INVITE")) {
xlog ("IS METHOD INVITE \n");
		
		setflag(ACC_DO); # do accounting
	}

	if (!uri==myself) {
	
xlog ("IF NOT URI EQUAL MYSELF \n");	
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
xlog ("IS METHOD PUBLISH SUBSCRIBE \n");
		sl_send_reply("503", "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER"))
	{
xlog ("IS METHOD REGISTER \n");

		if (   0 ) setflag(TCP_PERSISTENT);
		if (!save("location"))
			sl_reply_error();

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
xlog ("IF NOT LOOKUP LOCATION \n");		
		#t_newtran();
		#t_reply("404", "Not Found");
#$du="sip:192.168.1.209";
#
	if($fd =~ "^192\.168\.1\.*")
  	{
	 xlog("\033[36mCALL CAME FROM 192.168.52 ADDRESS-\033[0m---$fU--$tU--fd---$fd-\n");
	 xlog("\033[36mROUTE CALL TO OUTBOUND CONTEXT-\033[0m---$fU--$tU--fd---$fd-\n");
        #route(outbound);
	route(inbound);
        exit;
	}
	else
  	{
	xlog("\033[32mROUTE CALL TO INBOUND CONTEXT-\033[0m---$fU--$tU--fd---$fd-\n");
	route(inbound);
	exit;
  	}
	} 

	# when routing via usrloc, log the missed calls also
	setflag(ACC_MISSED);
	route(relay);
}


route[inbound] {
xlog ("CONTEXT ROUTE INBOUND \n");

#$var(destIP)="192.168.0.17";
# $rd=$var(destIP);
##               topology_hiding();
#                route(relay);
#                exit;


	
#	rest_get(http://127.0.0.1:9093/DVP/API/1.0.0.0/DynamicConfigGenerator/LbRequestController/in/$tU/$fd","$var(resultStr)","$var(aa)","$var(bb)");
#	rest_get("http://192.168.0.58:9093//LbRequestController/in/$tU/$fd","$var(resultStr)","$var(aa)","$var(bb)");
	#$var(resultStr)="1,192.168.0.20";
	#$var(resultStr)=",";
	$var(resultStr)='achi001,cluster,1';
#	$var(resultStr)="achi001,cs,192.168.0.17";

xlog ("\033[32m REST GET RESULT-----$ci---- \033[0m --- $var(resultStr)--- \n");

	if($var(resultStr)== "")
	{
		xlog("\033[31m-----ROUTE TO DISCONNECT--REST_GET result empty \33[0m--\n");
		route(disconnect);
		exit;
	};

#	$var(destIP)=$(var(resultStr){s.select,1,,})+":5080";
	$var(type)=$(var(resultStr){s.select,1,,});
	$var(dest)=$(var(resultStr){s.select,2,,});
	$var(uuid)=$(var(resultStr){s.select,0,,});

xlog(" callcount-- $var(type)-- $var(dest) -- $var(uuid) t\n");


switch($var(type))
        {
            case "cs":
                xlog("ROURING TYPE is CS--->>>>- $var(type) -- \n");
		xlog(" \033[32m SEND  value to LIMIT_API - --key - $var(uuid) -- \033[0m\n");
		rest_get("http://192.168.0.48:8085/dvp/6.0/limit_handler/limitapi/limit_increment/?key=$var(uuid)","$var(result)","$var(aa)","$var(bb)");
		
		xlog(" \033[32m Return value from pawan -- $var(result) --key - $var(uuid) -- \033[0m\n");

		if($var(result)== '"true"')
		{
			cache_store("redis:1","$ci","$var(uuid)");

			xlog(" \033[32m ROUTE CALL TO THE RELAY CONTEXT \033[0m\n");
			#    $du="sip:"+$var(destIP);
	                $rd=$var(dest);
			#    topology_hiding();
	                route(relay);
        	        exit;
        	}
        	else
        	{
			xlog(" \033[31m DISCONNECT CALL LIMIT EXCEED \033[0m\n");
                	sl_send_reply("486","Busy Here");
                	exit;
        	}

            break;

            case "cluster":
                xlog("ROURING TYPE is CLUSTER--->>>>- $var(type) -- \n");
		xlog(" \033[32m SEND  value to LIMIT_API - --key - $var(uuid) -- \033[0m\n");
                rest_get("http://192.168.0.48:8085/dvp/6.0/limit_handler/limitapi/limit_increment/?key=$var(uuid)","$var(result)","$var(aa)","$var(bb)");

		xlog(" \033[32m Return value from pawan -- $var(result) --key - $var(uuid) -- \033[0m\n");

		if($var(result)== '"true"')
                {
                        cache_store("redis:1","$ci","$var(uuid)");
		 xlog("\033[31m---LOAD_BALANCER- $var(dest)-- \33[0m--\n");		
		
			if (load_balance("$(var(dest){s.int})","sip")) 
			{
				xlog("\033[31m---LOAD_BALANCER--- \33[0m--\n");
		        	# dst URI points to the new destination
				xlog("sending call to $du\n");
			        route(relay);
				##      t_relay();
		        	exit;
			}
			else
			{
				cache_fetch("redis:1","$ci",$avp(uuid));

				xlog ("\033[32m --REDIS---$avp(uuid)----- \n");
				cache_remove("redis:1","$ci");
				cache_fetch("redis:1","$ci",$avp(11));
				xlog ("\033[32m --REDIS---$avp(11)----------------------------------\33[0m \n");

				xlog ("DISCONNECT FROM LOAD BALANCER -----  $avp(uuid)  ----\n");
				rest_get("http://192.168.0.48:8085/dvp/6.0/limit_handler/limitapi/limit_decrement/?key=$avp(uuid)","$var(result)","$var(aa)","$var(bb)");
				sl_send_reply("486","Busy Here");
	                        exit;

			}
                }
                else
                {
                        xlog(" \033[31m DISCONNECT CALL LIMIT EXCEED \033[0m\n");
                        sl_send_reply("486","Busy Here");
                        exit;
                }

            break;

            default:
               xlog("\031[32munknown destination number------------------\31[0m\n");
	       route(disconnect);
               exit;
       };

#$du="sip:"+$var(destIP);
#route(relay);
exit;
}

route[outbound] {
xlog ("CONTEXT ROUTE OUTBOUND \n");

#$var(destIP)="192.168.0.17";
# $rd=$var(destIP);
##               topology_hiding();
#                route(relay);
#                exit;


	
#	rest_get(http://127.0.0.1:9093/DVP/API/1.0.0.0/DynamicConfigGenerator/LbRequestController/in/$tU/$fd","$var(resultStr)","$var(aa)","$var(bb)");
#	rest_get("http://192.168.0.58:9093//LbRequestController/out/$tU/$fd","$var(resultStr)","$var(aa)","$var(bb)");
	#$var(resultStr)="1,192.168.0.20";
	#$var(resultStr)=",";
	$var(resultStr)='achi001,cluster,1';
#	$var(resultStr)="achi001,cs,192.168.0.17";

	xlog ("\033[32m REST GET RESULT-----$ci---- \033[0m --- $var(resultStr)--- \n");

	if($var(resultStr)== ",")
	{
		xlog("\033[31m-----ROUTE TO DISCONNECT--REST_GET result empty \33[0m--\n");
		route(disconnect);
		exit;
	};

#	$var(destIP)=$(var(resultStr){s.select,1,,})+":5080";
#	$var(type)=$(var(resultStr){s.select,1,,});
	$var(dest)=$(var(resultStr){s.select,1,,});
	$var(uuid)=$(var(resultStr){s.select,0,,});

	xlog(" callcount-- -- $var(dest) -- $var(uuid) t\n");

	xlog(" \033[32m OUTBOUND SEND  value to LIMIT_API - --key - $var(uuid) -- \033[0m\n");
	rest_get("http://192.168.0.0.29:8085/dvp/6.0/limit_handler/limitapi/limit_increment/?key=$var(uuid)","$var(result)","$var(aa)","$var(bb)");
	xlog(" \033[32m Return value from pawan -- $var(result) --key - $var(uuid) -- \033[0m\n");

	if($var(result)== '"true"')
	{
		cache_store("redis:1","$ci","$var(uuid)");
		xlog(" \033[32m ROUTE CALL TO THE RELAY CONTEXT \033[0m\n");
		#    $du="sip:"+$var(destIP);
                $rd=$var(dest);
		#    topology_hiding();
                route(relay);
       	        exit;
       	}
       	else
       	{
		xlog(" \033[31m DISCONNECT CALL LIMIT EXCEED \033[0m\n");
               	sl_send_reply("486","Busy Here");
               	exit;
       	}

exit;
}


#route[outbound] {
#xlog ("\033[36mCONTEXT ROUTE OUTBOUND \033[0m \n");
#
##if (is_present_hf("X-Gateway")) {
##                $avp(i:20)=$(hdr(X-Gateway));
##		$var(gateway) = $(hdr(X-Gateway));
##		remove_hf("X-Gateway");
#
##xlog("-GATEWAY ADDRESS------$var(gateway)---\n");
#xlog("-DIAL NUMBER----$fU---\n");	
#
#       #rest_get("http://172.20.112.222/DUOSLTV5/ContactV5Services/CSRequestWebApi/api/TrunkLimit?ipUrl=$fd&trunkNumber=$fU&numType=Outgoing","$var(resultStr)","$var(aa)","$var(bb)");
#	$var(resultStr)="2,192.168.1.195";
#xlog ("\033[32m REST GET RESULT \033[0m --- $var(resultStr)--- \n");
#
#        if($var(resultStr)== ",")
#        {
#                xlog("\033[31m-----ROUTE TO DISCONNECT--REST_GET result empty \33[0m--\n");
#                route(disconnect);
#                exit;
#        };
#
##       $var(destIP)=$(var(resultStr){s.select,1,,})+":5080";
##        $var(destIP)=$(var(resultStr){s.select,1,,});
#       $var(port)=$(var(resultStr){s.select,2,,});
#        $var(calCount)=$(var(resultStr){s.select,0,,});
#
#xlog(" callcount-- $var(calCount)\n");
#
#	#create_dialog("B");
#        #setflag(4);
##xlog("\033[36m-CREATE DIALOG \33[0m--\n");
#
# #       store_dlg_value("caller","$fU");
#  #      set_dlg_profile("cal","$fU");
#
##xlog("\033[36m SET DIALOG PROFILE-- $fU \33[0m \n");
#
# #       get_profile_size("cal","$fU","$avp(calls)");
#
##xlog(" \033[36m CALL COUNT OF cal DIALOG ON OUTBOUND PROFILE \033[0m --$avp(calls)--\n");
#
##	if($(var(calCount){s.int})>=$avp(calls))
##        {
##xlog(" \033[36m ROUTE CALL TO THE RELAY CONTEXT \033[0m\n");
##                $du="sip:"+$var(destIP);
##		$rd="172.16.1.1";                
##                route(relay);
##		exit;
##        }
##        else
##        {
##xlog(" \033[31m DISCONNECT CALL LIMIT EXCEED \033[0m\n");
##                sl_send_reply("486","Number Busy Here");
##                exit;
##        }
#exit;
#}


route[disconnect]
{
xlog("\033[31m-----------------DISCONNECT-----------------\033[0m \n");
	sl_send_reply("404","Not here");
	exit;
}


route[relay] {

xlog ("CONTEXT ROUTE RELAY \n");

	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

}



