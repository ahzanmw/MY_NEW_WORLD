#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=yes
log_facility=LOG_LOCAL0

children=4

/* uncomment the following line to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


#listen=udp:127.0.0.1:5060   # CUSTOMIZE ME
listen=udp:10.10.10.5:5060
listen=udp:10.10.10.5:5080


####### Modules Section ########

#set module path
mpath="/usr/lib64/opensips/modules"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)


#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

#### REGISTRAR module
loadmodule "registrar.so"

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)


#### UDP protocol
loadmodule "proto_udp.so"

### rest_client module

loadmodule "rest_client.so"
modparam("rest_client", "connection_timeout", 300)
modparam("rest_client", "curl_timeout", 300)
modparam("rest_client", "ssl_verifypeer", 0)
modparam("rest_client", "ssl_verifyhost", 0)

### pike Module
loadmodule "pike.so"

modparam("pike", "sampling_time_unit", 5)
modparam("pike", "reqs_density_per_unit", 60)
modparam("pike", "remove_latency", 120)
modparam("pike", "check_route", "pike")
modparam("pike", "pike_log_level", -1)

loadmodule "event_route.so"

loadmodule "event_rabbitmq.so"
modparam("event_rabbitmq", "heartbeat", 0)

####### Routing Logic ########

# main request routing logic

route{

xlog ("START ROUTE SECTION \n");

#############################################
## I'm live
if(is_method("OPTIONS"))
	{
xlog ("Send Reply OK \n");
	sl_send_reply("200" , "ok");
	exit;
	}
#####

if (!pike_check_req()) {
xlog("\033[36m-------------!pike_check_req -------- ------\033[0m--------------------> $si-\n");
exit;
}

#####


	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {
xlog ("HAS TO TAGGGG \n");
		# sequential requests within a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
xlog ("HAS TO TAG LOOSE ROUTE \n");
			
			if (is_method("BYE")) {
xlog ("HAS TO TAG  LOOSE ROUTE IS METHOD BYEEEEEE\n");
				# do accunting, even if the transaction fails
				do_accounting("log","failed");
			} else if (is_method("INVITE")) {
xlog ("HAS TO TAG  LOOSE ROUTE IS METHOD INVITE \n");
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(relay);
		} else {
			
xlog ("HAS TO TAG  LOOSE ROUTE ELSE \n");	
			if ( is_method("ACK") ) {
xlog ("HAS TO TAG  LOOSE ROUTE ELSE IS METHOD ACKKKK \n");
				if ( t_check_trans() ) {
xlog ("HAS TO TAG  LOOSE ROUTE ELSE T_CHECK_TRANS IF \n");
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
xlog ("HAS TO TAG  LOOSE ROUTE ELSE T_CHECK_TRANS T_RELAY  \n");
					exit;
				} else {
xlog ("HAS TO TAG  LOOSE ROUTE ELSE T_CHECK_TRANS ELSE \n");
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
xlog ("END OF HAS TO TAGGG \n");
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL"))
	{
xlog ("IS METHOD CANCEL \n");
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
xlog ("IS METHOD NOT REGISTER \n");
		if (from_uri==myself)
		{
xlog ("IS METHOD NOT REGISTER from_uri eq myself  \n");
		} else {
			# if caller is not local, then called number must be local
			if (!uri==myself) {
xlog ("IS METHOD NOT REGISTER from_uri not eq myself  \n");
#				send_reply("403","Rely forbidden");
				if (is_method("INVITE")) {
				xlog ("IS METHOD NOT REGISTER from_uri not eq myself INVITE \n");
				xlog("\033[36mCALL CAME FROM TRUNK -\033[0m---$fU--$tU--fd---$fd-\n");
					if($Ri == "10.10.10.5" && $Rp == "5060")
  					{
					# xlog("\033[36mCALL CAME FROM 192.168.52 ADDRESS-\033[0m---$fU--$tU--fd---$fd-\n");
					 xlog("\033[36mROUTE CALL TO INBOUND CONTEXT-\033[0m \n");
					#route(outbound);
					route(inbound);
				        exit;
					}
					else
					{
					send_reply("403","Rely forbidden");
					exit;
					}		
				}
				exit;
			}
		}
	}

	# preloaded route checking
	if (loose_route()) {
xlog ("IF LOOSE ROUTE \n");
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
xlog ("IS METHOD REGISTER MESSAGE  \n");
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
xlog ("IS METHOD INVITE  \n");
#xlog("\033[36mROUTE CALL TO OUTBOUND CONTEXT-\033[0m---PORT-$Ri--$Rp---fU--> $fU--tU--> $tU---tu-- $tu-- fd--> $fd-\n");
		if($Ri == "10.10.10.5" && $Rp == "5080")
  		{
		xlog("\033[36mINVITE-\033[0m---PORT---$Rp---fU--> $fU--tU--> $tU---tu-- $tu-- fd--> $fd-\n");
       			if (is_present_hf("X-Gateway")) 
			{
			xlog("\033[36mROUTE CALL TO OUTBOUND CONTEXT-\033[0m \n");
 		        #$avp(i:20)=$(hdr(X-Gateway));
			#$var(gateway) = $(hdr(X-Gateway)); 
			#remove_hf("X-Gateway");
			route(outbound);
 			}
			else
			{
			route(disconnect);
			}
		exit;
		}

		do_accounting("log");

	}

	if (!uri==myself) {
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
xlog ("IS METHOD PUBLISH SUBSCRIBE  \n");

		sl_send_reply("503", "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER"))
	{
xlog ("IS METHOD REGISTER  \n");

		if (!save("location"))
			sl_reply_error();

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		t_newtran();
		t_reply("404", "Not Found");
		exit;
	} 

	# when routing via usrloc, log the missed calls also
	do_accounting("log","missed");
	route(relay);
}


route[relay] {
xlog ("CONTEXT ROUTE RELAY \n");
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

}
route[inbound] {
xlog ("\033[36mCONTEXT ROUTE INBOUND \033[0m  \n");
rest_get("http://dynamicconfigurationgenerator.facetone.dialog.lk/DVP/API/1.0.0.0/DynamicConfigGenerator/LbRequestController/in/$tU/$fd","$var(resultStr)","$var(aa)","$var(bb)");

#xlog ("\033[32m REST GET RESULT \033[0m --- $var(resultStr)--- \n");

	if($var(resultStr)== ",,,")
	{
		xlog("\033[31m--ROUTE TO DISCONNECT--CALLSERVER NOT_FOUND \33[0m--\n");
		exit;
	};
	$var(destIP)=$(var(resultStr){s.select,3,,});
xlog(" SELECTED CALL SERVER --- $var(destIP)\n");
rewriteport("5080");
$rd=$var(destIP);
xlog(" DESTINATION IS >>> $rd >>>\n");
route(relay);
exit;
}

route[outbound] 
{ 
xlog ("\033[36mCONTEXT ROUTE OUTBOUND \033[0m \n");

$var(gateway) = $(hdr(X-Gateway)); 
remove_hf("X-Gateway");
 
xlog("-GATEWAY ADDRESS------$var(gateway)\n");
xlog("-DIAL NUMBER----$fU---\n");
$rd = $var(gateway);
$rp = "5060";
xlog(" DESTINATION IS >>> $rd >>> \n");
route(relay);
exit;
}

route[disconnect]
{
xlog("\033[31m----DISCONNECT-----\033[0m \n");
	sl_send_reply("404","Not here");
	exit;
}

route[pike]{
   #if (src_ip==10.10.7.7)  #/*trusted, do not check it*/
if(src_ip=~ "^10\.10\.10\.*")    
  { 
	xlog("--------$fd----$si---------------------------------------------src_ip---\n"); 
	drop;
}	
#    /* all other IPs are checked*/
}

event_route[E_PIKE_BLOCKED] {
		fetch_event_params("ip=$avp(pike-ip)");
		xlog("\033[36m IP $avp(pike-ipm  has been blocked\n");
#exec("php -q /usr/src/FloodLog.php $avp(pike-ip)");
subscribe_event("E_PIKE_BLOCKED", "rabbitmq:duo:DuoS123@10.10.10.16:5672/pike");
}
